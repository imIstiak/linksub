# Complete Vercel Deployment Guide

## Step-by-Step Commands:

### 1. Install Vercel CLI (Already done)
```bash
npm install -g vercel
```

### 2. Login to Vercel
```bash
vercel login
```

### 3. Deploy your application
```bash
vercel
```

### 4. Deploy to production
```bash
vercel --prod
```

## Alternative: Deploy via GitHub (Recommended)

### Option 1: GitHub Integration (Easier)
1. Go to https://vercel.com
2. Sign up/Login with GitHub
3. Click "New Project"
4. Import your GitHub repository: imIstiak/linksub
5. Vercel will auto-detect and deploy!

### Option 2: CLI Deployment
Run these commands in order:

```bash
# Login (opens browser)
vercel login

# Deploy (first time - creates project)
vercel

# Follow prompts:
# - Link to existing project? No
# - Project name: rmb-bdt-calculator (or your choice)
# - Directory: ./ (current directory)
# - Settings correct? Yes

# Deploy to production
vercel --prod
```

## Important Notes:

### Vercel Advantages:
‚úÖ Free tier with generous limits
‚úÖ Automatic HTTPS
‚úÖ Global CDN
‚úÖ Zero-config deployment
‚úÖ Automatic deployments from GitHub
‚úÖ Better for Node.js apps than Heroku free tier

### Database Considerations:
‚ö†Ô∏è SQLite files don't persist on Vercel
üìù Consider using Vercel KV or external database for production

### Files Created:
- vercel.json: Deployment configuration
- Updated package.json: Build scripts

## After Deployment:
Your app will be available at:
- Development: https://your-project-name.vercel.app
- Production: https://your-project-name.vercel.app (same URL)

## Useful Commands:
```bash
vercel --help          # Show help
vercel ls              # List deployments  
vercel logs            # View logs
vercel domains         # Manage domains
vercel env             # Manage environment variables
```